Экзаминационные вопросы ASM(FASM)

1) Состав и назначение регистров микропроцессора (Intel 8086).
[1, стр.3-7][2, Часть 4. Регистры процессора 8086]
2) Подготовка и отладка программ. Простейший Ввод-Вывод. Lazarus IDE v1.6.4,FreePascal 3.0; Flat assembler - 1.72.21 (FASM/DosBox/Win64/C/C++),прерывания DOS,C,C++;
3) Формат команды ассемблера. Символьные имена. Директивы объявления данных.
[1, стр.9][2,Часть 5. Директивы объявления данных]
4) Комментарии. Директивы описания сегментов, данных. (FASM/DosBox/Win64)
[2, Часть 31. Сегментная адресация,Часть 5. Директивы объявления данных]
5) Системы счисления.
[2, Часть 7. Системы счисления]
6) Способы и режимы адресации.
[2,Часть 14. Режимы адресации]
7) Классификация команд. Команды пересылки данных и передачи управления.
[1, стр. 8-11]
8) Арифметические команды.
[1, стр 11-13][2, Часть 8-12]
9) Команды обработки строк.
[2,Часть 22 - 23]
10) Логические команды и команды сдвигов.
[1,13-15][2,Часть18 -19,30]
11) Регистры флагов (FLAGS, EFLAGS, RFLAGS). Команды управления процессором.
[3][1, стр. 18]
12) Условные и безусловные переходы. Синтаксис объявления меток.
[1, 17-18, 27][2,Часть 5,16,27]
13) Часть 26. Локальные переменные
[2, Часть 26. Локальные переменные]
14) Подготовка и использование *.inc модулей, макросы FASM, подключение сторонних С И С++ Библиотеки.
15) Обработчики прерываний. Организация прерываний. Классификация прерываний. Стандартные обработчики прерываний для работы с клавиатурой и дисплеем.
16) DOS прерывания, работа с файлам.
[5, стр. 333-435]
[4, стр. 63-68][5, стр. 333-435]
[2, Приложение:Работа с файлами в DOS]
17) DOS прерывания, графические режимы DOS, простейшая графика.
18) Резидентные программы для DosBox.
[5, стр. 435-470]
19) Реверс-инжиниринг кода.
20) Связь подпрограмм на Ассемблере с программами на языке высокого уровня.
21) Особенности ASM вставок FreePascal 3.0(Lazarus IDE v1.6.4).
22) Указатели, массивы, 64 разрядные числа/ASM/FPascal/FASM/C/C++.
23) Реверс-инжиниринг кода.
24) Способы реверс-инжиниринга кода.
25) Дерективы компиляции FASM под операционные системы Win32/Win64.
26) FASM, автоматизация разработки и запуска проекта, Notepad++, *.bat.
27) FASM, передача параметров вызываемой функций, 3 способа, макрос параметрического вызова функций.
28) FASM, макросы автоматизации написания повторяющихся асемблерных конструкций.
29) FASM,С++, указатели, арифметика указателей.
30) FASM,С++, ассемблерные приметивы, структуры и классы.
31) FASM,С++, циклы с пред условием, циклы с пост условием, циклы со счетчикам. Рассказать, реализовать, показать...

Практические задания:
(FreePascal 2.6/3.0/FASM(DosBox/Win32/Win64)/с++)
1. Обменять значения в переменных x:integer и y:^integer.
2. Обменять значения в переменных x[4] и y^[3]; при
выборке значения из массива y^ используйте команду XLAT.
3. Обменять значения в переменных x[4] и y^[3].
Используйте команды PUSH и POP для временного хранения значений элементов массива.
4. Определите, сколько байт требуется на запись в оперативной памяти
команды LEA EBX,M, и какие числа записаны в этих байтах.
5. Используя команды пересылок, покажите, как работает команда CMC.
6. Содержимое регистра флагов поместите в переменную x : integer.
7. Обменять значения в переменных x : integer и y : ^integer.
Обязательно использовать команду XCHG.
8. Реализовать сложение двух 64-разрядных чисел.
9. Реализовать вычитание двух 64-разрядных чисел.
10. Реализовать вычитание двух 64-разрядных чисел, не используя команду SUB.
11. Показать на примере реализацию команд умножения и деления
командами 32-разрядного процессора (формат посмотреть в окне
дизассемблера).
12. Найти в строке позицию заданного символа.
13. Определить, есть ли в двух строках одинаковые символы на одинаковых позициях.
14. Найти позицию, на которой две строки символов отличаются. 
15. Удалить из строки заданный символ.
16. Удалить из строки символ на заданной позиции. 
17. Реализовать на языке ассемблера вычисление выражения, записанного
на языке Паскаль: begin if (x>=5) and (x<=7) then x := 1 else x := 2; end.
18. Реализовать на языке ассемблера вычисление выражения, записанного
на языке Паскаль: begin if (x<5) or (x>7) then x := 1 else x := 2; end.
19. Напишите программу для вычисления формулы k=m+1-(n-1-r). Все числа 16-битные целые со знаком. Запустите в отладчике и проверьте правильность вычисления.
20. Напишите программу для вычисления формулы d=b-1+a-c. Все числа — 3-х байтные целые без знака. 
21. Напишите программу для вычисления формулы z = (x·y) / (x + y). Все числа 16-битные целые со знаком.
22. Напишите программу для вычисления формулы z = (x·y) / (x + y). Все числа со знаком. Размер x — байт, размер y — слово, размер z — двойное слово.
23. Напишите программу для вычисления степени числа 3 по формуле a = 3n. Число a — 16-битное целое без знака, число n — 8-битное целое без знака (используйте n<11, чтобы избежать переполнения). Проверьте работу программы в отладчике.
24. Объявите в программе два массива 16-битных целых со знаком. Количество элементов массивов должно быть одинаковым и храниться в 8-битной переменной без знака. Требуется из последнего элемента второго массива вычесть первый элемент первого, из предпоследнего — вычесть второй элемент и т.д. 
25. Объявите переменную x как двойное слово с каким-то значением. Инвертируйте 7-й, 15-й и 31-й бит. Обнулите младший байт переменной. Присвойте единичное значение битам 11-14 и 28-30. Результат сохраните в переменной y (y - объявлена как двойное слово). Инвертируйте значение x. Проверьте работу программы в отладчике.
26. Упражнение простое. Напишите программу для сравнения двух переменных со знаком a и b. В зависимости от результатов сравнения выведите «a < b», «a > b» или «a = b». Проверьте работу программы в отладчике.
27. Объявите в программе два массива слов. Размер массивов должен быть одинаков и храниться в 8-битной переменной без знака. Напишите программу сравнения двух массивов, используя команду LOOPZ. (Массивы равны, если все их элементы соответственно равны. Цикл можно завершить, если найдена хотя бы одна пара не совпадающих элементов). Выведите на экран строку, сообщающую о результате сравнения.
28. Объявите массив из 8 слов без знака. Сдвиньте первый элемент на 1 бит влево, второй элемент — на 2 бита вправо (логическим сдвигом), третий элемент — на 3 бита влево и т.д. до конца массива. Используйте циклы. Проверьте работу программы в отладчике.
29. Объявите в программе строку. Длина строки должна быть больше 8 символов и храниться в байте без знака. Напишите цикл для шифрования строки по алгоритму: первый символ циклически сдвигается вправо на 1 бит, второй символ — на 2 бита, …, 7-й — на 7 битов, 8-й — снова на 1 бит, 9-й на 2 бита и т.д. Затем напишите цикл для расшифровки строки и выведите её на экран.
30. Объявите в программе строку «$!olleH». Напишите код для переворачивания строки с использованием стека (в цикле поместите каждый символ в стек, а затем извлеките в обратном порядке). Выведите полученную строку на экран.
31. Объявите в программе 2-3 массива слов без знака. Количество элементов каждого массива должно быть разным и храниться в отдельной 16-битной переменной без знака. Напишите процедуру для вычисления среднего арифметического массива чисел. В качестве параметров ей будет передаваться адрес массива и количество элементов, а возвращать она будет вычисленное значение. С помощью процедуры вычислите среднее арифметическое каждого массива и сохраните где-нибудь в памяти. Проверьте работу программы в отладчике.
32. Напишите программу для вывода на консоль массива слов со знаком в десятичном виде (например, через запятую). Для вывода чисел можете воспользоваться моим примером или написать свою собственную процедуру.
33. Напишите программу для ввода байта с консоли в двоичном виде. Желательно с проверкой корректности ввода
34. Чтобы потренироваться в работе с флагами напишите следующую программу. Вычислите сумму значений флагов CF, SF, ZF и выведите на консоль результат сложения. Если результат больше 1, инвертируйте значение флага CF
35. Напишите любую процедуру с 4-5 параметрами, передаваемыми через стек. Вызовите процедуру в своей программе. Проверьте работу программы в отладчике.
36. Напишите процедуру для ввода десятичного числа (от 0 до 255) с консоли. Буфер для ввода строки должен быть локальным, то есть выделяться в стеке при вызове процедуры. Процедура должна вызываться без параметров и возвращать введённое число в регистре AL.
37. Напишите макрос для определения максимального значения. У макроса должно быть 3 операнда: второй и третий сравниваются между собой, больший из них помещается на место первого.
38. Напишите процедуру, которая сбрасывает старший единичный бит и устанавливает в единицу младший нулевой бит в регистре AX.
39. Напишите программу, которая сравнивает две переменные и выполняет переход в другой сегмент в зависимости от результата сравнения. Если меньше, переход в сегмент 1. Если больше — в сегмент 2. Иначе в сегмент 3.


Литература
1) Архитектура ЭВМ. Задания и примеры выполнения лабораторных работ : методические указания для студентов специальности 23020165 / сост. : А. Е. Докторов, Е. А. Докторова. – Ульяновск : УлГТУ, 2008. – 32 с.
2) Электронный ресурс. "Учебный курс программирования на ассемблере FASM..." URL: https://fasmworld.ru/uchebnik/
3)  Электронный ресурс. URL: https://en.wikipedia.org/wiki/FLAGS_register
URL:  https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80_%D1%84%D0%BB%D0%B0%D0%B3%D0%BE%D0%B2
4) Организация вычислительных систем и сетей : Учебное пособие. Халабия Р.Ф., МГАПИ-Москва, 2000
5) Н.Г.Хитрово, Начала системного программирования в среде MS-DOS7  2009,  С. 702.
6) (Мануал Fasm) https://www.cyberforum.ru/fasm/thread1240599.html
7) (Макросы Fasm) https://www.cyberforum.ru/fasm/thread1253291.html